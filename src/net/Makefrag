OBJDIRS     += net
NETSRC  := net_utils.cc exec_protocol.cc client.cc server.cc oblivious_transfer.cc
NETOBJ := $(patsubst %.cc,$(OBJDIR)/net/%.o,$(NETSRC))

DEMO_SRC := protocol_tester.cc
DEMO_OBJ := $(patsubst %.cc,$(OBJDIR)/net/%.o,$(DEMO_SRC))

BENCH_SRC := protocol_bench.cc
BENCH_OBJ := $(patsubst %.cc,$(OBJDIR)/net/%.o,$(BENCH_SRC))


net:    $(OBJDIR)/libnet.so
$(OBJDIR)/libnet.so: $(NETOBJ) $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libcipher.so  $(OBJDIR)/libmpc.so
	$(CXX) -shared -o $@ $(NETOBJ) $(LDFLAGS) $(L_BOOST_SYSTEM) -lmath -lcipher -lmpc -lcrypto -lprotobuf -lprotobuf_defs -lutil

net:	$(OBJDIR)/net/client

$(OBJDIR)/net/client: $(OBJDIR)/net/test_client.o $(DEMO_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(DEMO_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
	    -lntl -lgf2x   $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil -lssl -lcrypto

net:	$(OBJDIR)/net/server

$(OBJDIR)/net/server: $(OBJDIR)/net/test_server.o $(DEMO_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(DEMO_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree -lmath -lutil\
	    -lntl  -lgf2x  $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil -lssl -lcrypto


net:	$(OBJDIR)/net/bench_client_compare

$(OBJDIR)/net/bench_client_compare: $(OBJDIR)/net/bench_client_compare.o $(BENCH_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(BENCH_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
	    -lntl  -lgf2x  $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil

net:	$(OBJDIR)/net/bench_client_argmax

$(OBJDIR)/net/bench_client_argmax: $(OBJDIR)/net/bench_client_argmax.o $(BENCH_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(BENCH_OBJ) -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
	    -lntl  -lgf2x  $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil

net:	$(OBJDIR)/net/bench_client_change

$(OBJDIR)/net/bench_client_change: $(OBJDIR)/net/bench_client_change.o $(BENCH_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(BENCH_OBJ)  -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
	    -lntl  -lgf2x  $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil

net:	$(OBJDIR)/net/bench_client_ot

$(OBJDIR)/net/bench_client_ot: $(OBJDIR)/net/bench_client_ot.o $(BENCH_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(BENCH_OBJ)  -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree\
        -lntl  -lgf2x  $(L_BOOST_SYSTEM)\
        -lprotobuf -lprotobuf_defs -lnet -lutil



net:	$(OBJDIR)/net/bench_server

$(OBJDIR)/net/bench_server: $(OBJDIR)/net/bench_server.o $(BENCH_OBJ) $(PROTO_OBJ) $(OBJDIR)/libmpc.so $(OBJDIR)/libcipher.so $(OBJDIR)/libtree.so $(OBJDIR)/libmath.so $(OBJDIR)/libprotobuf_defs.so $(OBJDIR)/libnet.so
	$(CXX) $< $(BENCH_OBJ)  -o $@  $(SHAIFHEPATH)/fhe.a $(LDFLAGS) -lmpc -lcipher -ltree -lmath -lutil\
	    -lntl  -lgf2x  $(L_BOOST_SYSTEM)\
       -lprotobuf -lprotobuf_defs -lnet -lutil

all: net
# vim: set noexpandtab:
